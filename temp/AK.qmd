---
title: "SGMM Example 2: Angrist and Krueger (1991)"
format: pdf
editor: visual
---

We revisit Angrist and Krueger (1991) and estimate the model with SGMM and the alternative.

```{r}
rm(list = ls())
set.seed(2023)

# Call libraries
library(tictoc)
library(gmm)
library(sgmm)
library(sketching)

# Permutation of the original data
n_total = nrow(AK)
perm_index = sample(n_total)
AK = AK[perm_index, ]

y = AK$LWKLYWGE
intercept = AK$CNST
X_end = AK$EDUC
X_exg = AK[,3:11]
x = cbind(X_exg, X_end)
Z_inst = AK[,12:(ncol(AK)-1)]
z = cbind(X_exg, Z_inst)
fullsample = cbind(y,intercept,x)

x = as.matrix(x)
z = as.matrix(z)
d = ncol(x)

# sample split: initial sample 
n0  = ceiling(n_total*0.1)

x0 = x[c(1:n0),]
z0 = z[c(1:n0),]
y0 = y[c(1:n0)]

# sample split: main sample 
x1 = x[c((n0+1):n_total),]
z1 = z[c((n0+1):n_total),]
y1 = y[c((n0+1):n_total)]


# n = nrow(fullsample)


n = length(y1)
index_X1 = 10
```

## TSLS

```{r}
start.2sls = tic("2sls")
# TSLS
tsls = ivreg::ivreg(y1 ~ x1 | z1) 
# use heteroskedasticity-robust standard error for inference
tsls_ci = lmtest:: coefci(tsls, parm = (index_X1+1), level = 0.95, df = Inf, 
                           vcov = sandwich::vcovHC, type = "HC0")
res_tsls = cbind(tsls$coefficients[d+1], tsls_ci)
row.names(res_tsls) = "edu"
colnames(res_tsls)[1] = "est"
print(res_tsls)
end.2sls = toc()
time.2sls = end.2sls$toc - end.2sls$tic
```

## GMM

```{r}
start.gmm = tic("gmm")
g0 = y1~x1
iv = z1
out_gmm = gmm(g0,x=iv)
gmm_ci = confint(out_gmm, parm = (index_X1+1), level = 0.95)$test
result_gmm = c(out_gmm$coefficients[index_X1+1], gmm_ci)
end.gmm = toc()
time.gmm = end.gmm$toc - end.gmm$tic
print(result_gmm)
```

## S2SLS

### Use the original variables (no change)

```{r}
start.s2sls_so3 = tic("s2sls_so")

# Original scale and location
z0_s3 = cbind(1, z0)
x0_s3 = cbind(1, x0)
y0_s3 = y0

z1_s3 = cbind(1, z1)
x1_s3 = cbind(1, x1)
y1_s3 = y1

Phi_start3 = (t(z0_s3)%*%x0_s3)/n0
# no intercept TSLS
iv0_3 = ivreg::ivreg(y0_s3 ~ x0_s3 - 1  | z0_s3 -1 )
bt_start3 = iv0_3$coefficients
w_start3 = solve(t(z0_s3)%*%z0_s3/n0)

# S2SLS
out3 = sgmm(x=x1_s3, y=y1_s3, z=z1_s3, gamma_0=1e-02, alpha=0.501, bt_start = bt_start3,
           inference = "rs", weight= "2sls_so", n0 = n0,
           Phi_start = Phi_start3, w_start = w_start3, n_perm = 0)

# confidence intervals 
cv_rs = 6.747
est3 = out3$coefficient[index_X1+1,]
est_ci_lb3 = est3 - cv_rs * sqrt(out3$V_hat[index_X1+1,index_X1+1,]/n) 
est_ci_ub3 = est3 + cv_rs * sqrt(out3$V_hat[index_X1+1,index_X1+1,]/n)
result_s2sls_so3 = cbind(est3, est_ci_lb3, est_ci_ub3)
end.s2sls_so3 = toc()
time.s2sls_so3 = end.s2sls_so3$toc - end.s2sls_so3$tic
print(result_s2sls_so3)
```

## SGMM

### Use the original variables (no change)

```{r}
start.sgmm_so3 = tic("sgmm_so")

# Original scale and location
z0_s4 = cbind(1, z0)
x0_s4 = cbind(1, x0)
y0_s4 = y0

z1_s4 = cbind(1, z1)
x1_s4 = cbind(1, x1)
y1_s4 = y1

n1 = floor(100*sqrt(n))
Phi_start4 = (t(z0_s4)%*%x0_s4)/n0
# no intercept TSLS
iv0_4 = ivreg::ivreg(y0_s4 ~ x0_s4 - 1  | z0_s4 -1 )
bt_start4 = iv0_4$coefficients
w_start4 = solve(t(z0_s4)%*%z0_s4/n0)

# sgmm
out4 = sgmm(x=x1_s4, y=y1_s4, z=z1_s4, gamma_0=1e-02, alpha=0.501, bt_start = bt_start4,             
           inference = "rs", weight= "gmm_so", n0 = n0, n1 = n1,
           Phi_start = Phi_start4, w_start = w_start4, n_perm = 0, w_option="single")

# confidence intervals 
cv_rs = 6.747
est4 = out4$coefficient[index_X1+1,]
est_ci_lb4 = est4 - cv_rs * sqrt(out4$V_hat[index_X1+1,index_X1+1,]/n) 
est_ci_ub4 = est4 + cv_rs * sqrt(out4$V_hat[index_X1+1,index_X1+1,]/n)
result_sgmm_so4 = cbind(est4, est_ci_lb4, est_ci_ub4)
end.sgmm_so4 = toc()
time.sgmm_so4 = end.sgmm_so4$toc - end.sgmm_so4$tic
print(result_sgmm_so4)
```

### SGMM_plugin

```{r}
start.sgmm_plugin = tic("sgmm_plugin")

# Original scale and location
z0_s5 = cbind(1, z0)
x0_s5 = cbind(1, x0)
y0_s5 = y0

z1_s5 = cbind(1, z1)
x1_s5 = cbind(1, x1)
y1_s5 = y1

Phi_start5 = (t(z0_s5)%*%x0_s5)/n0
# no intercept TSLS
iv0_5 = ivreg::ivreg(y0_s5 ~ x0_s5 - 1  | z0_s5 -1 )
bt_start5 = iv0_5$coefficients
w_start5 = solve(t(z0_s5)%*%z0_s5/n0)

# SGMM_plugin
out5 = sgmm(x=x1_s5, y=y1_s5, z=z1_s5, gamma_0=1e-02, alpha=0.501, bt_start = bt_start5,
           inference = "plugin", weight= "gmm_so", n0 = n0,
           Phi_start = Phi_start5, w_start = w_start5, n_perm = 0, w_option="frequent")

# confidence intervals 
cv_plugin = 1.96
est5 = out5$coefficient[index_X1+1,]
est_ci_lb5 = est5 - cv_plugin * sqrt(out5$V_hat[index_X1+1,index_X1+1,]/n) 
est_ci_ub5 = est5 + cv_plugin * sqrt(out5$V_hat[index_X1+1,index_X1+1,]/n)
result_s2sls_so5 = cbind(est5, est_ci_lb5, est_ci_ub5)
end.sgmm_plugin = toc()
time.sgmm_plugin = end.sgmm_plugin$toc - end.sgmm_plugin$tic
print(result_s2sls_so5)
```

# Extras

## S2SLS

### Demean each variable and drop the intercept term

```{r}
start.s2sls_so = tic("s2sls_so")

# Demean each variable to drop the intercept term from s2sls. 
z0_s = z0 - mean(z0)
x0_s = x0 - mean(x0)
y0_s = y0 - mean(y0)

z1_s = z1 - mean(z1)
x1_s = x1 - mean(x1)
y1_s = y1 - mean(y1)

Phi_start = (t(z0_s)%*%x0_s)/n0
# no intercept TSLS
iv0 = ivreg::ivreg(y0_s ~ x0_s - 1  | z0_s - 1 )
bt_start = iv0$coefficients
w_start = solve(t(z0_s)%*%z0_s/n0)

# S2SLS
out = sgmm(x=x1_s, y=y1_s, z=z1_s, gamma_0=1e-1, alpha=0.667,
           bt_start = bt_start,inference = "rs", 
           weight= "2sls_so", n0 = n0,
           Phi_start = Phi_start, w_start = w_start, n_perm = 0)

# confidence intervals 
cv_rs = 6.747
est = out$coefficient[index_X1,]
est_ci_lb = est - cv_rs * sqrt(out$V_hat[index_X1,index_X1,]/n) 
est_ci_ub = est + cv_rs * sqrt(out$V_hat[index_X1,index_X1,]/n)
result_s2sls_so = cbind(est, est_ci_lb, est_ci_ub)
end.s2sls_so = toc()
time.s2sls_so = end.s2sls_so$toc - end.s2sls_so$tic
print(result_s2sls_so)
```

## SGMM

### Demean each variable and drop the intercept term

```{r}
start.sgmm_so = tic("sgmm_so")

# Demean each variable to drop the intercept term from sgmm. 
Phi_start = (t(z0_s)%*%x0_s)/n0
# no intercept TSLS
iv0 = ivreg::ivreg(y0_s ~ x0_s - 1  | z0_s - 1 )
bt_start = iv0$coefficients
w_start = solve(t(z0_s)%*%z0_s/n0)
n1 = floor(10*sqrt(n))

# sgmm
out = sgmm(x=x1, y=y1, z=z1, gamma_0=1, alpha=0.667, bt_start = bt_start,             
           inference = "rs", weight= "gmm_so", n0 = n0, n1 = n1,
           Phi_start = Phi_start, w_start = w_start, n_perm = 0, w_option="single")
  
# confidence intervals 
cv_rs = 6.747
est = out$coefficient[index_X1,]
est_ci_lb = est - cv_rs * sqrt(out$V_hat[index_X1,index_X1,]/n) 
est_ci_ub = est + cv_rs * sqrt(out$V_hat[index_X1,index_X1,]/n)
result_sgmm_so = cbind(est, est_ci_lb, est_ci_ub)
end.sgmm_so = toc()
time.sgmm_so = end.sgmm_so$toc - end.sgmm_so$tic
print(result_sgmm_so)
```
