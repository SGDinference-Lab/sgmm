---
title: "SGMM Example 2: Angrist and Krueger (1991)"
format: pdf
editor: visual
---

We revisit Angrist and Krueger (1991) and estimate the model with SGMM and the alternative.

```{r}
rm(list = ls())
set.seed(2023)

# Call libraries
library(tictoc)
library(gmm)
library(sgmm)
library(sketching)

# Permutation of the original data
n_total = nrow(AK)
perm_index = sample(n_total)
AK = AK[perm_index, ]

y = AK$LWKLYWGE
intercept = AK$CNST
X_end = AK$EDUC
X_exg = AK[,3:11]
x = cbind(X_exg, X_end)
Z_inst = AK[,12:(ncol(AK)-1)]
z = cbind(X_exg, Z_inst)
fullsample = cbind(y,intercept,x)

x = as.matrix(x)
z = as.matrix(z)
d = ncol(x)

# sample split: initial sample 
n0  = ceiling(n_total*0.1)

x0 = x[c(1:n0),]
z0 = z[c(1:n0),]
y0 = y[c(1:n0)]

# sample split: main sample 
x1 = x[c((n0+1):n_total),]
z1 = z[c((n0+1):n_total),]
y1 = y[c((n0+1):n_total)]

n = length(y1)
index_X1 = 10
```

## TSLS

```{r}
start.2sls = tic("2sls")
# TSLS
tsls = ivreg::ivreg(y1 ~ x1 | z1) 
# use heteroskedasticity-robust standard error for inference
tsls_ci = lmtest:: coefci(tsls, parm = (index_X1+1), 
                          level = 0.95, df = Inf, 
                          vcov = sandwich::vcovHC, 
                          type = "HC0")
res_tsls = cbind(tsls$coefficients[d+1], tsls_ci)
row.names(res_tsls) = "edu"
colnames(res_tsls)[1] = "est"
print(res_tsls)
end.2sls = toc()
time.2sls = end.2sls$toc - end.2sls$tic
```

# Update on August 4

## SGMM_plugin (multiple epochs)

```{r}
start.sgmm = tic("sgmm")

# Original scale and location
z0_me = cbind(1, z0)
x0_me = cbind(1, x0)
y0_me = y0

Phi_start_me = (t(z0_me)%*%x0_me)/n0
# no intercept TSLS (intercept is already included in x and z)
iv0_me = ivreg::ivreg(y0_me ~ x0_me - 1  | z0_me - 1)
bt_start_me = iv0_me$coefficients
w_start_me = solve(t(z0_me)%*%z0_me/n0)

# gamma_0 selection (added on July 26th)

tmp1 = solve(t(Phi_start_me)%*%w_start_me%*%Phi_start_me)
tmp2 = t(Phi_start_me)%*%w_start_me

snorm_result = matrix(NA, nrow=n0, ncol=1)
for (i in 1:n0){
  tmp_i = (as.matrix(z0_me[i,]))%*%t(as.matrix(x0_me[i,]))
  tmp = tmp1%*%tmp2%*%tmp_i 
  snorm = norm(tmp, type="2")
  snorm_result[i,]=snorm/ncol(x0_me) 
}
Psi0 = quantile(snorm_result,0.5)
gamma0 = 1/Psi0
print(gamma0)
a_cnst = 0.501

# Multiple Epochs

z1_me = cbind(1, z1)
x1_me = cbind(1, x1)
y1_me = y1
z_me = {}
x_me = {}
y_me = {}

no_epochs = 50
for (i_epoch in 1:no_epochs){
  epoch_index = sample(n)
  z_me = rbind(z_me, z1_me[epoch_index,])
  x_me = rbind(x_me, x1_me[epoch_index,])
  y_me = rbind(y_me, matrix(y1_me[epoch_index],ncol=1))
}

# SGMM plugin with multiple epochs
out_me = sgmm(x=x_me, y=y_me, z=z_me, gamma_0=gamma0, alpha=a_cnst, bt_start = bt_start_me,
           inference = "plugin", weight= "gmm_so", n0 = n0,
           Phi_start = Phi_start_me, w_start = w_start_me,
           n_perm = 5, w_option="frequent")

# confidence intervals 
cv_plugin = 1.96
est_me = out_me$coefficient[index_X1+1,]
est_ci_lb_me = est_me - cv_plugin * sqrt(out_me$V_hat[index_X1+1,index_X1+1,]/n) 
est_ci_ub_me = est_me + cv_plugin * sqrt(out_me$V_hat[index_X1+1,index_X1+1,]/n)
result_sgmm_plugin_me = cbind(est_me, est_ci_lb_me, est_ci_ub_me)
end.sgmm = toc()
time.sgmm = end.sgmm$toc - end.sgmm$tic
print(result_sgmm_plugin_me)
```
